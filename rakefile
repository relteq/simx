topdir = File.expand_path(".")
libdir = File.join(topdir, "lib")
$LOAD_PATH.unshift libdir

require 'yaml'

##require 'simx/gems'

#== Config

# Read the deployment-specific config file (see config/README).
config = (YAML.load(File.read("config.yaml")) rescue nil)

##config_local_gems(topdir)

if config
  # destination for the remote task
  dest_host = config["deploy"]["host"]
  dest_path = config["deploy"]["path"]

else
  warn "no config.yaml -- run 'rake git:init', or set it manually;\n" +
       "then 'git co' a branch; see doc/tutorial.txt for more info"
end

## dest_user

remote_files = FileList[
  "README",
  "rakefile",
  "config",
  "config.yaml",
  "lib",
  "bin",
  "public/crossdomain.xml",
  "public/favicon.ico",
  
  # not NetworkEditor.html, since that needs to be dynamically generated
  # with proper gmap key
  
  # not NetworkEditor.swf, since that needs to be symlinked on each host
    ## swf location could be specified in the config
  
  "public/examples",
  "public/demo/density-trace.yaml",
  "public/demo/US101-test.xml"
]
remote_files.exclude 'public/NetworkEditor.swf'
remote_files.exclude 'public/tmp'

daemon_dirs = %w{
  runq
  apiweb
  dpool
}

DATA_DIR = "var/data/"

directory DATA_DIR

# tasks that can be delegated to all of the daemon_dirs
delegated_tasks = [:start, :stop, :restart, :stat]

#== Tasks

desc "update and restart remote daemons, #{dest_host}:#{dest_path}"
task :remote => %w{ remote:stop remote:update remote:start }

namespace :remote do
  desc "set up new installation"
  task :init => [:update, :data_dir, :crontab, :start]
  
  desc "update to #{dest_host}:#{dest_path}, including subdirs"
  task :update => :update_me
  
  desc "update to #{dest_host}:#{dest_path}, not including subdirs"
  task :update_me
  
  delegated_tasks.each do |name|
    desc "#{name} remote daemons"
    task name
  end
  
  task :data_dir do
    sh "ssh #{dest_host} 'cd #{dest_path} && rake #{DATA_DIR}'"
  end

  desc "install remote cronjob to start daemons after reboot"
  task :crontab => :update_me
end

delegated_tasks.each do |name|
  desc "#{name} local daemons"
  task name
end

namespace :workers do
  delegated_tasks.each do |name|
    desc "#{name} local workers and manager"
    task name
  end
end

desc "update canonical test.xml file to its public url"
task :update_examples

desc "install local cronjob to start daemons after reboot"
task :crontab

desc "stop daemons, remove var/{run,log,tmp}, keep var/data"
task :clean

desc "remove var/data"
task :clean_data

##desc "puts needed gems in #{GEMDIR} dir"
##task GEMDIR

##desc "create file with env vars for local gems"
##file GEMENV

#== Implementation

clean_tgt = [:stop]
if File.directory? "worker" # in case of simx deployed w/o workers in same dir
  clean_tgt << "workers:stop"
end

task :clean => clean_tgt do
  rm_rf "var/run"
  rm_rf "var/log"
  rm_rf "var/tmp"
  rm_rf "var/data/runq.sqlite"
  rm_rf "var/data/simx.sqlite"
end

task :clean_data do
  rm_rf "var/data"
end

namespace :remote do
  task :update do
    puts "="*60
    daemon_dirs.each do |dir|
      sh "cd #{dir} && rake remote:update"
      puts "="*60
    end
  end
  
  task :update_me do
    sh "rsync -Cavz --delete --relative --exclude='*.bck'" +
       " #{remote_files.to_a.join(" ")} #{dest_host}:#{dest_path}/"
  end
  
  delegated_tasks.each do |name|
    task name do
      sh "ssh #{dest_host} 'cd #{dest_path} && rake #{name}'"
        ## pass on rake args to this rake
    end
  end
  
  task :crontab do
    sh "ssh #{dest_host} 'cd #{dest_path} && rake crontab'"
  end
end

delegated_tasks.each do |name|
  task name do
    daemon_dirs.each do |dir|
      print "%20s: " % dir
      $stdout.flush
      result = `cd #{dir} && rake #{name}`
        ## pass on rake args to this rake
      puts result if result
    end
  end
end

namespace :workers do
  delegated_tasks.each do |name|
    task name do
      result = `cd worker && rake #{name}`
      puts "workers: #{result}"
    end
  end
end

task :update_examples do
  sh "rsync -avz apiweb/doc/test.xml vii:public_html/"
  ## this is a very special case; later, we should have a library of examples
  ## somewhere
end

directory "var"

task :crontab => "var" do
  path = File.expand_path(".")
  cron_cmd = "*/5 * * * * cd #{path} && bin/simx.cron || true"
    ## remove rubygems
  
  ct = `crontab -l`
  rx = Regexp.quote(cron_cmd)

  if defined? ct.grep # 1.8
    ct_for_grep = ct
  else # 1.9
    ct_for_grep = ct.each_line
  end

  if ct_for_grep.grep(/^#{rx}/).empty?
    IO.popen("crontab -", "w") do |pipe|
      pipe.puts ct, cron_cmd
    end
  end
end

if File.directory? ".git"
  namespace :git do
    post_checkout = <<END
#!/bin/sh

# Start from the repository root.
cd ./$(git rev-parse --show-cdup)

RUBYOPT="" bin/switch-branch
END

    post_commit = <<END
#!/bin/sh
rake git:version
END

    desc "set up git hooks after cloning"
    task :init do
      File.open(".git/hooks/post-checkout", "w") do |f|
        f.puts post_checkout
      end
      sh "chmod +x .git/hooks/post-checkout"

      File.open(".git/hooks/post-commit", "w") do |f|
        f.puts post_commit
      end
      sh "chmod +x .git/hooks/post-commit"
    end
    
    ver_file = "lib/simx/version.rb"
    file ver_file => :version
    
    desc "write version file"
    task :version do
      tag = `git describe --tags 2>/dev/null`.chomp
      if tag.empty?
        tag = nil
        commit = `git rev-parse HEAD`.chomp
      end
      ## should also check if working tree is different from HEAD
      ver = tag || commit
      File.open(ver_file, "w") do |f|
        f.puts "SIMX_VERSION = '#{ver}'"
      end
    end
  end
end

namespace :config do
  desc "show config for the current deployment"
  task :show do
    puts config.to_yaml
  end
end

##file GEMENV => GEMDIR
##directory GEMDIR
##task GEMDIR do |t|
##  sh "bin/crown -v #{t.name} #{GEMLIST.join(" ")} >#{GEMENV}"
##end
