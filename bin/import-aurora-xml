#!/usr/bin/env ruby

if ARGV.size == 0 or ARGV.size > 2 or ARGV.delete("-h")
  puts <<-END
  
    Usage: #{$0} [--log] aurora_xml_file [db]
    
    Read aurora_xml_file, parse according to aurora.xsd, and import into
    a database.
    
    The database is either an in-memory sqlite3 database (for testing) or
    specified by the db argument, which may be any valid database connection
    string:
    
      sqlite://foo.db
      postgres://user:password@host:port/database_name
    
    Options:
    
      --log     print full SQL log to stderr
      
  END
  exit
end

if ARGV.delete("--log")
  require 'logger'
  DB.loggers << Logger.new($stderr)
end

xml_file = ARGV[0]
db_url = ARGV[1]

File.exist? xml_file or abort "no such file: #{xml_file}"

require 'sequel'
require 'nokogiri'

if db_url
  DB = Sequel.connect db_url
else
  DB = Sequel.sqlite
end

topdir = File.expand_path("..", File.dirname(__FILE__))
libdir = File.join(topdir, "lib")
$LOAD_PATH.unshift libdir

# create tables if they don't exist
require 'db/schema'

require 'db/model/aurora'
require 'db/import/scenario'

module Aurora
  module Parser
    # +src+ can be io, string, etc.
    def parse src
      ## optionally validate
      Nokogiri.XML(src).xpath("/scenario")[0]
    end
  end
  extend Parser
  
  class Importer
    include Parser
    
    attr_reader :src
    attr_reader :scenario_xml
    attr_reader :scenario
    
    def initialize src, opts = {}
      @src = src
      @opts = opts
    end
    
    # +src+ can be io, string, etc.
    # Returns the ID of the imported scenario.
    def import
      @scenario_xml = parse(src)
      
      DB.transaction do
        @scenario = Scenario.create_from_xml(scenario_xml)
      end
      
      return scenario[:id]
    end
    
  end
  
  def self.import src
    Importer.new(src).import
  end
end

sc_id = Aurora.import(File.read(xml_file))

p Aurora::Scenario[sc_id]
