#!/usr/bin/env ruby

topdir = File.expand_path("..", File.dirname(__FILE__))
libdir = File.join(topdir, "lib")
$LOAD_PATH.unshift libdir

require 'simx/argos'

optdef = {
  "h"           => true,
  "help"        => true,
  "log"         => true,
  "emit"        => true,
  "rekey"       => true,
  "dry-run"     => true,
  "round-trip"  => true
}

opts = Argos.parse_options(ARGV, optdef)

if ARGV.size == 0 or
   not ARGV.grep(/^-./).empty? or opts["h"] or opts["help"]
  puts <<-END
  
    Usage: #{$0} [opts] [db] aurora_xml_file ...
    
    Read aurora_xml_file, parse according to aurora.xsd, and import into
    a database. Print the scenario ids to stderr.
    
    The database is either an in-memory sqlite3 database (for testing) or
    specified by the db argument, which may be any valid database connection
    string:
    
      sqlite://foo.db
      postgres://user:password@host:port/database_name
    
    If more than one aurora_xml_file is given, import all of them in
    sequence.
    
    Options:
    
      --log     Print full SQL log to stderr.
      
      --emit    Emit the xml before it is imported, but after rekeying.
      
      --dry-run Quit before sending anything to the database.
      
      --rekey   Reassign numeric IDs in preparation for importing to DB.
                Non-numeric IDs are unaffected and imported to new rows.
                Use this when the input xml cannot be assumed to
                have been exported from the db.
      
      --round-trip
                Export the same scenario to stdout after importing.

  END
  exit
end

require 'sequel'
require 'nokogiri'

CONNECTION_PAT = /^\w+:\/\//

case ARGV[0]
when CONNECTION_PAT
  DB = Sequel.connect(ARGV.shift)
else
  DB = Sequel.sqlite
end

xml_files = ARGV

xml_files.each do |xml_file|
  File.exist? xml_file or abort "no such file: #{xml_file}"
end

if opts["log"]
  require 'logger'
  DB.loggers << Logger.new($stderr)
end

require 'db/schema'
Aurora.create_tables?

require 'db/model/aurora'
require 'db/import/scenario'

module Aurora
  module Parser
    # +src+ can be io, string, etc.
    def parse src
      ## optionally validate
      Nokogiri.XML(src).xpath("/scenario")[0]
    end
  end
  extend Parser
  
  class Importer
    include Parser
    
    attr_reader :src
    attr_reader :opts
    attr_reader :scenario_xml
    attr_reader :scenario
    
    # Set opts["rekey"] to true if the input xml cannot be assumed to have
    # been exported from the db.
    def initialize src, opts = {}
      @src = src
      @opts = opts
    end
    
    # +src+ can be io, string, etc.
    # Returns the imported scenario.
    def import
      @scenario_xml = parse(src)
      
      if opts["rekey"]
        require 'db/import/util'
        ImportUtil.rekey! @scenario_xml
      end
      
      if opts["emit"]
        puts @scenario_xml
      end
      
      if opts["dry-run"]
        return
      end
      
      DB.transaction do
        @scenario = Scenario.create_from_xml(scenario_xml)
      end
      
      if opts["round-trip"]
        require 'db/export/scenario'
        puts scenario.to_xml
      end
      
      return scenario
    end
    
  end
  
  def self.import src, opts
    Importer.new(src, opts).import
  end
end

scenarios = xml_files.map do |xml_file|
  Aurora.import(File.read(xml_file), opts)
end

$stderr.puts scenarios.map {|sc| sc.id}.inspect
