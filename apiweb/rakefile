topdir = File.expand_path("..")
libdir = File.join(topdir, "lib")
$LOAD_PATH.unshift libdir

require 'yaml'

require 'simx/daemon'
##require 'simx/gems'

#== Config

# Read the deployment-specific config file (see config/README).
config = YAML.load(File.read("../config.yaml"))
apiweb_config = config["apiweb"] || {}
runq_config = config["runq"] || {}
aws_config = config["aws"] || {}
db_config = config["db"] || {}

ENV["SIMX_S3_BUCKET"] ||= aws_config["s3 bucket"]
ENV["SIMX_S3_MOCK"] ||= aws_config["mock"].to_s

ENV["SIMX_GROUP"] = apiweb_config["simx_group"]
ENV["SIMX_USER"]  = apiweb_config["simx_user"]

# port served by the daemon process (rake start)
# (with rake run, process port is printed on terminal)
port = Integer(ENV["APIWEB_PORT"] || apiweb_config["port"])

runq_port = Integer(ENV["RUNQ_PORT"] || runq_config["port"])
runq_host = ENV["RUNQ_HOST"] || "localhost"

log_level = apiweb_config["log level"] || "debug"

# destination for the remote task
dest_host = config["deploy"]["host"]
dest_path = File.join(config["deploy"]["path"], "apiweb")

proc_name   = "apiweb"
svr_name    = File.join(libdir, "apiweb", "#{proc_name}.rb")
exec_dir    = topdir
sock_dir    = File.join(exec_dir, "var/run")
sock_name   = File.join(sock_dir, "#{proc_name}.sock")
log_dir     = File.join(exec_dir, "var/log")
log_file    = File.join(log_dir, "#{proc_name}.log")
err_file    = log_file.sub(/\.log/, ".err")
data_dir    = File.join(exec_dir, "var/data")

db_url = ENV["SIMX_DB_URL"] || (db_config && db_config["url"])
if not db_url
  db_file = File.join(data_dir, "simx.sqlite")
  db_url = "sqlite://" + db_file
end
ENV["SIMX_DB_URL"] = db_url

ENV["SIMX_DATA_DIR"] ||= data_dir

FileUtils.mkdir_p log_dir
FileUtils.mkdir_p sock_dir
FileUtils.mkdir_p data_dir

#== Tasks

ops = %w{ start stop restart stat watch log }

desc "update and restart remote daemon, #{dest_host}:#{port}"
task :remote

namespace :remote do
  desc "update to #{dest_host}:#{dest_path}"
  task :update
  
  ops.each do |name|
    desc "#{name} remote daemon"
    task name
  end
end

desc "run child process (not daemon; ^C to stop)"
task :run

desc "start daemon"
task :start

desc "restart daemon"
task :restart

desc "stop daemon"
task :stop

desc "status of daemon"
task :stat

desc "watch new log entries of daemon"
task :watch

desc "browse logs of daemon"
task :log

#== Implementation

include Daemon

task :remote => %w{ remote:stop remote:update remote:start }

remote_files = FileList[
  "rakefile",
  "lib",
]

namespace :remote do
  task :update do
    sh "rsync -Cavz --delete --exclude='*.bck'" +
       " #{remote_files.to_a.join(" ")} #{dest_host}:#{dest_path}/"
  end
  
  ops.each do |name|
    task name do
      sh "ssh #{dest_host} 'cd #{dest_path} && rake #{name}'"
    end
  end
end

task :run do
  sh "ruby", "-C", exec_dir, "-I", libdir, svr_name
end

task :start do
  result = command("stat", sock_name)
  case result
  when /not running/i
    puts "starting on port #{port}"
    
    opts = {
      "err_file"    => err_file,
      "log_file"    => log_file,
      "log_params"  => "weekly",
      "sock_name"   => sock_name,
      "daemon_dir"  => exec_dir,
      "proc_name"   => proc_name
    }
    
    args = [
      "-I", libdir,
      svr_name,
      "-p", port.to_s,
      "-e", "production",
      "--", # end sinatra options; options below are passed to svr_name
      "--runq-port", runq_port.to_s,
      "--runq-host", runq_host,
      "--log-file", log_file,
      "--log-level", log_level
    ]
    
    daemonize opts do
      exec "ruby", *args
    end
    
    sleep 0.1
    print_stat(sock_name, err_file)
    
  else
    puts result
  end
end

task :stop do
  result = command("stop", sock_name)
  puts result
  FileUtils.rm_f err_file

  case result
  when Errno::ECONNREFUSED, TimeoutError
    rm_f sock_name # assume it is stopped already
  end
end

task :stat do
  print_stat(sock_name, err_file)
  ## could also send a stat request to the web server
end

task :restart => [:stop, :start]

task :watch do
  system "tail -F #{log_file}" # system to suppress error on INT
end

task :log do
  system "less +G --follow-name #{log_file}" # system to suppress error on INT
end

desc "test import and export"
task :test => ["test:import", "test:export"]
  ## check that round trip is ok (how?)

namespace :test do
  desc "test import"
  task :import do
    sh "cd test && ruby test-import.rb"
  end

  desc "test export"
  task :export do
    sh "cd test && ruby test-export.rb"
  end

  desc "run with tiny db"
  task :run => [:setup, "^run"]

  task :setup do
    ia = File.join(exec_dir, "bin", "import-aurora-xml")
    if db_file
      if not File.exist?(db_file)
        FileUtils.mkdir_p data_dir
        sh "#{ia} #{db_url} doc/tiny.xml"
      end
    else
      ## if db empty
      sh "#{ia} #{db_url} doc/tiny.xml"
    end
  end
end
