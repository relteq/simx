# Rakefile to manage deployment and remote control of worker processes and
# worker-manager processes.

TOPDIR = topdir = File.expand_path("..")
libdir = File.join(topdir, "lib")
$LOAD_PATH.unshift libdir

DEPLOY_VERBOSELY = (RakeFileUtils.verbose_flag == true) # false when :default

require 'yaml'

require 'simx/daemon'
##require 'simx/gems'

#== Config

class << self
  attr_reader :config, :proc_name, :svr_name, :exec_dir,
    :sock_dir, :sock_name, :log_dir, :log_file, :err_file,
    :libdir, :config_file, :simx_worker_config, :runq_config, :runweb_config,
    :simx_worker_log_level
end

# Read the deployment-specific config file (see ../config/README).
begin
  config_yaml = File.read("../config.yaml")
rescue Errno::ENOENT
else
  simx_config = YAML.load(config_yaml)
  @simx_worker_config = simx_config["worker"]
  @simx_worker_log_level = simx_worker_config["log level"]
  @runq_config = simx_config["runq"]
  @runweb_config = simx_config["runweb"]
end

@libdir = libdir

if simx_worker_config and simx_worker_config["config file"]
  @config_file = File.join("config", simx_worker_config["config file"])
end

if not @config_file or not File.file? @config_file
  @config_file = "config.yaml"
  # on a remote host, there's only one, written by the #update method
end
@config = YAML.load(File.read(config_file))

@proc_name   = "worker-manager"
@svr_name    = "lib/#{proc_name}.rb"
@exec_dir    = ".."
@sock_dir    = File.expand_path(File.join(exec_dir, "var/run"))
@sock_name   = File.join(sock_dir, "#{proc_name}.sock")
@log_dir     = File.expand_path(File.join(exec_dir, "var/log"))
@log_file    = File.join(log_dir, "#{proc_name}.log")
@err_file    = log_file.sub(/\.log/, ".err")

FileUtils.mkdir_p log_dir
FileUtils.mkdir_p sock_dir

#== Tasks

namespace :config do
  desc "show config for all deployments"
  task :show
end

instances = config.keys # unique set of names for all the worker deployments
ops = %w{ update update_aurora crontab run start stop restart stat log watch }

desc "update and restart all workers specified in #{config_file}"
task :all => ["all:update", "all:restart"]

namespace :all do
  ops.each do |op|
    desc "#{op} all workers specified in #{config_file}"
    task op => instances.map {|s| "#{s}:#{op}"}
  end
  task "crontab" => "update"
end

instances.each do |instance|
  namespace instance do
    ops.each do |op|
      unless op == "restart"
        desc "#{op} workers on #{instance}"
        task op do |t|
          send op, instance, config[instance]
        end
      end
    end
    
    desc "restart workers on #{instance}"
    task "restart" => ["stop", "start"]
    
    task "crontab" => "update"
    
    desc "set up new installation"
    task :init => [:update, :crontab, :start]
    
    namespace :config do
      desc "show config for #{instance}"
      task :show
    end
  end

  desc "update and restart #{instance}"
  task instance => [
    "#{instance}:stop", "#{instance}:update", "#{instance}:start"]
end

(ops - %w{ update cron }).each do |op|
  desc "alias for local:#{op}"
  task op => "local:#{op}"
end

#== Implementation

DEFAULT_INSTANCE_CONFIG = {
  "host"        => "localhost",
  "user"        => ENV["USERNAME"],
  "dir"         => TOPDIR,
  "runq_host"   => ENV["RUNQ_HOST"] || "localhost",
  "runweb_host" => ENV["RUNWEB_HOST"] || "localhost"
}

default_runq_port = ENV["RUNQ_PORT"] || (runq_config && runq_config["port"])
if default_runq_port
  DEFAULT_INSTANCE_CONFIG["runq_port"] = Integer(default_runq_port)
end

default_runweb_port = ENV["RUNWEB_PORT"] || (runweb_config && runweb_config["port"])
if default_runweb_port
  DEFAULT_INSTANCE_CONFIG["runweb_port"] = Integer(default_runweb_port)
end

namespace :config do
  task :show do
    puts config.to_yaml
  end
end

instances.each do |instance|
  namespace instance do
    namespace :config do
      task :show do
        cfg = DEFAULT_INSTANCE_CONFIG.merge(config[instance])
        puts cfg.to_yaml
      end
    end
  end
end

def aurora_files
  require 'worker/aurora-classpath'
  Aurora::DEPLOYMENT_FILES
end

def update_aurora instance, instance_config
  if DEPLOY_VERBOSELY
    puts "updating aurora on #{instance}"
  end
  
  if is_local? instance_config
    puts "updating locally is a noop" if DEPLOY_VERBOSELY
    return
  end
  
  cfg = DEFAULT_INSTANCE_CONFIG.merge(instance_config)
  userhost = [ cfg["user"], cfg["host"] ].join("@")
  dest_dir = `ssh #{userhost} 'echo $AURORA_CLASS_PREFIX'`.chomp
  if dest_dir.empty?
    raise "No AURORA_CLASS_PREFIX on #{userhost}"
  end
  
  sh "ssh #{userhost} 'mkdir -p #{dest_dir}'"
  
  sh "cd $AURORA_CLASS_PREFIX && rsync -Cavz --relative --delete" +
     " #{aurora_files.join(" ")} #{userhost}:#{dest_dir}/"
end

def update instance, instance_config
  if DEPLOY_VERBOSELY
    puts "updating #{instance} with #{{instance => instance_config}.to_yaml}"
  end
  
  if is_local? instance_config
    puts "updating locally is a noop" if DEPLOY_VERBOSELY
    return
  end
     
  cfg = DEFAULT_INSTANCE_CONFIG.merge(instance_config)
  
  dir = cfg["dir"]
  wdir = File.join(dir, "worker")
  userhost = [ cfg["user"], cfg["host"] ].join("@")
  
  sh "ssh #{userhost} 'mkdir -p #{wdir}'" 
  
  sh "rsync -Cavz --delete --exclude='*.bck'" +
     " lib rakefile #{userhost}:#{wdir}/"

  sh "cd .. && rsync -Cavz --delete --exclude='*.bck'" +
     " rakefile bin lib runq #{userhost}:#{dir}/"

  ic = instance_config.dup
  %w{ dir host user }.each do |k|
    ic.delete k
  end
  ic["instance_name"] = instance
  remote_config = {"local" => ic} # local is just a convention
  
  fn = "config.yaml" # remote deployments just have one config file
  IO.popen("ssh #{userhost} 'cd #{wdir} && cat >#{fn}'", "w") do |ssh|
    ssh.puts remote_config.to_yaml
  end
end

def run instance, instance_config
  if is_local? instance_config
    do_run instance, instance_config
  else
    abort "run task is not implemented for remote instance targets"
  end
end

def start instance, instance_config
  if is_local? instance_config
    do_start instance, instance_config
  else
    do_remote "start", instance, instance_config
  end
end

def stop instance, instance_config
  if is_local? instance_config
    do_stop instance, instance_config
  else
    do_remote "stop", instance, instance_config
  end
end

def stat instance, instance_config
  if is_local? instance_config
    do_stat instance, instance_config
  else
    do_remote "stat", instance, instance_config
  end
end

def watch instance, instance_config
  if is_local? instance_config
    do_watch instance, instance_config
  else
    do_remote "watch", instance, instance_config
  end
end

def log instance, instance_config
  if is_local? instance_config
    do_log instance, instance_config
  else
    do_remote "log", instance, instance_config
  end
end

def crontab instance, instance_config
  if is_local? instance_config
    do_crontab instance, instance_config
  else
    do_remote "crontab", instance, instance_config
  end
end

def is_local? instance_config
  host, user, dir = instance_config.values_at("host", "user", "dir")
  
  (!host || host == "localhost") &&
  (!user || user == ENV["USERNAME"]) &&
  (!dir || File.expand_path(dir) == TOPDIR)
end

def do_remote op, instance, instance_config
  puts "On remote instance #{instance}:"
  
  cfg = DEFAULT_INSTANCE_CONFIG.merge(instance_config)
  wdir = File.join(cfg["dir"], "worker")
  userhost = [ cfg["user"], cfg["host"] ].join("@")

  sh "ssh #{userhost} 'cd #{wdir} && rake local:#{op}'"
end

include Daemon

def do_run instance, instance_config
  cfg = DEFAULT_INSTANCE_CONFIG.merge(instance_config)
  cfg_yml = cfg.to_yaml.sub(/^--- /, "") # yaml prefix looks like switch
  
  simx_lib = ENV["simx_lib"] = File.expand_path(libdir)
  
  sh "ruby",
      "-C", exec_dir,
      "-I", simx_lib,
      ## don't use -r; damn rubygems
      "-e", "require '#{File.expand_path(svr_name)}'; WorkerManager.run",
      cfg_yml
end

def do_start instance, instance_config
  result = command("stat", sock_name)
  case result
  when /not running/i
    puts "starting #{instance}"
    
    opts = {
      "err_file"    => err_file,
      "log_file"    => log_file,
      "log_params"  => "weekly",
      "sock_name"   => sock_name,
      "daemon_dir"  => exec_dir,
      "proc_name"   => proc_name
    }
    
    h = {
      "log_file"      => log_file
    }
    
    if simx_worker_log_level
      h["log_level"] = simx_worker_log_level
    end
    
    cfg = DEFAULT_INSTANCE_CONFIG.merge(h).merge(instance_config)
    cfg_yml = cfg.to_yaml.sub(/^--- /, "") # yaml prefix looks like switch

    simx_lib = ENV["simx_lib"] = File.expand_path(libdir)

    args = [
      "-I", simx_lib,
      "-e", "require '#{File.expand_path(svr_name)}'; WorkerManager.run",
      cfg_yml
    ]
    
    daemonize opts do
      exec "ruby", *args
    end
    
    sleep 0.1
    print_stat(sock_name, err_file)
    
  else
    puts result
  end
end

def do_stop instance, instance_config
  result = command("stop", sock_name)
  puts result
  FileUtils.rm_f err_file

  case result
  when Errno::ECONNREFUSED, TimeoutError
    rm_f sock_name # assume it is stopped already
  end
end

def do_stat instance, instance_config
  print_stat(sock_name, err_file)
end

def do_crontab instance, instance_config
  path = File.expand_path("..") # n.b.
  cron_cmd = "*/5 * * * * cd #{path} && bin/worker-manager.cron || true"
    ## remove rubygems
  
  ct = `crontab -l`
  rx = Regexp.quote(cron_cmd)
  if ct.grep(/^#{rx}/).empty?
    IO.popen("crontab -", "w") do |pipe|
      pipe.puts ct, cron_cmd
    end
  end
end

def do_watch instance, instance_config
  system "tail -F #{log_file}" # system to suppress error on INT
end

def do_log instance, instance_config
  system "less +G --follow-name #{log_file}" # system to suppress error on INT
end
